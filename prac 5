<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lung Cancer Prediction</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 50px;
        }
        .container {
            width: 50%;
            margin: auto;
        }
        input[type="text"], select {
            width: 100%;
            padding: 12px 20px;
            margin: 8px 0;
            display: inline-block;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }
        input[type="submit"] {
            width: 100%;
            background-color: #4CAF50;
            color: white;
            padding: 14px 20px;
            margin: 8px 0;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        input[type="submit"]:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>Lung Cancer Prediction Form</h2>
        <form action="/predict" method="POST">
            <label for="gender">Gender:</label>
            <select name="gender">
                <option value="M">Male</option>
                <option value="F">Female</option>
            </select>
            
            <label for="age">Age:</label>
            <input type="text" name="age" placeholder="Enter Age" required>

            <label for="smoking">Smoking:</label>
            <select name="smoking">
                <option value="2">Yes</option>
                <option value="1">No</option>
            </select>

            <label for="yellow_fingers">Yellow Fingers:</label>
            <select name="yellow_fingers">
                <option value="2">Yes</option>
                <option value="1">No</option>
            </select>

            <label for="anxiety">Anxiety:</label>
            <select name="anxiety">
                <option value="2">Yes</option>
                <option value="1">No</option>
            </select>

            <label for="peer_pressure">Peer Pressure:</label>
            <select name="peer_pressure">
                <option value="2">Yes</option>
                <option value="1">No</option>
            </select>

            <label for="chronic_disease">Chronic Disease:</label>
            <select name="chronic_disease">
                <option value="2">Yes</option>
                <option value="1">No</option>
            </select>

            <label for="fatigue">Fatigue:</label>
            <select name="fatigue">
                <option value="2">Yes</option>
                <option value="1">No</option>
            </select>

            <label for="allergy">Allergy:</label>
            <select name="allergy">
                <option value="2">Yes</option>
                <option value="1">No</option>
            </select>

            <label for="wheezing">Wheezing:</label>
            <select name="wheezing">
                <option value="2">Yes</option>
                <option value="1">No</option>
            </select>

            <label for="alcohol">Alcohol Consuming:</label>
            <select name="alcohol">
                <option value="2">Yes</option>
                <option value="1">No</option>
            </select>

            <label for="coughing">Coughing:</label>
            <select name="coughing">
                <option value="2">Yes</option>
                <option value="1">No</option>
            </select>

            <label for="shortness_of_breath">Shortness of Breath:</label>
            <select name="shortness_of_breath">
                <option value="2">Yes</option>
                <option value="1">No</option>
            </select>

            <label for="swallowing_difficulty">Swallowing Difficulty:</label>
            <select name="swallowing_difficulty">
                <option value="2">Yes</option>
                <option value="1">No</option>
            </select>

            <label for="chest_pain">Chest Pain:</label>
            <select name="chest_pain">
                <option value="2">Yes</option>
                <option value="1">No</option>
            </select>

            <input type="submit" value="Predict">
        </form>

        <h3>{{ prediction_text }}</h3>
    </div>
</body>
</html>

app.py
Conversation opened. 1 read message.

Skip to content
Using Gmail with screen readers
sabyasachibanerjee1234@gmail.com 
3 of many
safe flask code DO NOT CHANGE
Inbox

Sabyasachi Banerjee <sabyasachibanerjee1234@gmail.com>
Attachments
Oct 9, 2024, 4:14 PM
to me, shreyash


from flask import Flask, render_template, request
import numpy as np
import joblib

app = Flask(__name__)

# Load the model directly from the joblib file
model = joblib.load("lung_cancer_model.joblib")

@app.route('/')
def home():
    return render_template('title.html')

@app.route('/predict', methods=['POST'])
def predict():
    if request.method == 'POST':
        # Get data from the form
        gender = 1 if request.form['gender'] == 'M' else 0
        age = int(request.form['age'])
        smoking = int(request.form['smoking'])
        yellow_fingers = int(request.form['yellow_fingers'])
        anxiety = int(request.form['anxiety'])
        peer_pressure = int(request.form['peer_pressure'])
        chronic_disease = int(request.form['chronic_disease'])
        fatigue = int(request.form['fatigue'])
        allergy = int(request.form['allergy'])
        wheezing = int(request.form['wheezing'])
        alcohol = int(request.form['alcohol'])
        coughing = int(request.form['coughing'])
        shortness_of_breath = int(request.form['shortness_of_breath'])
        swallowing_difficulty = int(request.form['swallowing_difficulty'])
        chest_pain = int(request.form['chest_pain'])

        # Prepare the feature vector for prediction
        features = np.array([[gender, age, smoking, yellow_fingers, anxiety, peer_pressure,
                              chronic_disease, fatigue, allergy, wheezing, alcohol, coughing,
                              shortness_of_breath, swallowing_difficulty, chest_pain]])

        # No scaling needed here since model was trained without scaling

        # Predict using the model
        prediction = model.predict(features)

        output = 'Yes' if prediction[0] == 1 else 'No'

        return render_template('title.html', prediction_text=f'Lung Cancer Prediction: {output}')

if __name__ == "__main__":
    app.run(debug=True)

 4 Attachments
  •  Scanned by Gmail
sabyasachibanerjee1234@gmail.com. Press tab to insert.
from flask import Flask, render_template, request
import numpy as np
import joblib

app = Flask(__name__)

# Load the model directly from the joblib file
model = joblib.load("lung_cancer_model.joblib")

@app.route('/')
def home():
    return render_template('title.html')

@app.route('/predict', methods=['POST'])
def predict():
    if request.method == 'POST':
        # Get data from the form
        gender = 1 if request.form['gender'] == 'M' else 0
        age = int(request.form['age'])
        smoking = int(request.form['smoking'])
        yellow_fingers = int(request.form['yellow_fingers'])
        anxiety = int(request.form['anxiety'])
        peer_pressure = int(request.form['peer_pressure'])
        chronic_disease = int(request.form['chronic_disease'])
        fatigue = int(request.form['fatigue'])
        allergy = int(request.form['allergy'])
        wheezing = int(request.form['wheezing'])
        alcohol = int(request.form['alcohol'])
        coughing = int(request.form['coughing'])
        shortness_of_breath = int(request.form['shortness_of_breath'])
        swallowing_difficulty = int(request.form['swallowing_difficulty'])
        chest_pain = int(request.form['chest_pain'])

        # Prepare the feature vector for prediction
        features = np.array([[gender, age, smoking, yellow_fingers, anxiety, peer_pressure,
                              chronic_disease, fatigue, allergy, wheezing, alcohol, coughing,
                              shortness_of_breath, swallowing_difficulty, chest_pain]])

        # No scaling needed here since model was trained without scaling

        # Predict using the model
        prediction = model.predict(features)

        output = 'Yes' if prediction[0] == 1 else 'No'

        return render_template('title.html', prediction_text=f'Lung Cancer Prediction: {output}')

if __name__ == "__main__":
    app.run(debug=True)
app.py
Displaying model.py.

model.py
Conversation opened. 1 read message.

Skip to content
Using Gmail with screen readers
sabyasachibanerjee1234@gmail.com 
3 of many
safe flask code DO NOT CHANGE
Inbox

Sabyasachi Banerjee <sabyasachibanerjee1234@gmail.com>
Attachments
Oct 9, 2024, 4:14 PM
to me, shreyash


from flask import Flask, render_template, request
import numpy as np
import joblib

app = Flask(__name__)

# Load the model directly from the joblib file
model = joblib.load("lung_cancer_model.joblib")

@app.route('/')
def home():
    return render_template('title.html')

@app.route('/predict', methods=['POST'])
def predict():
    if request.method == 'POST':
        # Get data from the form
        gender = 1 if request.form['gender'] == 'M' else 0
        age = int(request.form['age'])
        smoking = int(request.form['smoking'])
        yellow_fingers = int(request.form['yellow_fingers'])
        anxiety = int(request.form['anxiety'])
        peer_pressure = int(request.form['peer_pressure'])
        chronic_disease = int(request.form['chronic_disease'])
        fatigue = int(request.form['fatigue'])
        allergy = int(request.form['allergy'])
        wheezing = int(request.form['wheezing'])
        alcohol = int(request.form['alcohol'])
        coughing = int(request.form['coughing'])
        shortness_of_breath = int(request.form['shortness_of_breath'])
        swallowing_difficulty = int(request.form['swallowing_difficulty'])
        chest_pain = int(request.form['chest_pain'])

        # Prepare the feature vector for prediction
        features = np.array([[gender, age, smoking, yellow_fingers, anxiety, peer_pressure,
                              chronic_disease, fatigue, allergy, wheezing, alcohol, coughing,
                              shortness_of_breath, swallowing_difficulty, chest_pain]])

        # No scaling needed here since model was trained without scaling

        # Predict using the model
        prediction = model.predict(features)

        output = 'Yes' if prediction[0] == 1 else 'No'

        return render_template('title.html', prediction_text=f'Lung Cancer Prediction: {output}')

if __name__ == "__main__":
    app.run(debug=True)

 4 Attachments
  •  Scanned by Gmail
sabyasachibanerjee1234@gmail.com. Press tab to insert.
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import joblib

# Load the dataset direc-cancertly from local storage
data = pd.read_csv("lung_cancer.csv")

# Strip column names to remove extra spaces
data.columns = data.columns.str.strip()

# Convert 'GENDER' to binary (M=1, F=0)
data['GENDER'] = data['GENDER'].apply(lambda x: 1 if x.strip().upper() == 'M' else 0)

# Convert 'LUNG_CANCER' to binary (YES=1, NO=0)
data['LUNG_CANCER'] = data['LUNG_CANCER'].apply(lambda x: 1 if x.strip().upper() == 'YES' else 0)

# Define features (X) and target (y)
X = data.drop(columns=['LUNG_CANCER'])
y = data['LUNG_CANCER']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Print accuracy score
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy * 100:.2f}%")

# Save the model using joblib without generating .pkl files
joblib.dump(model, 'lung_cancer_model.joblib')

model.py
Displaying model.py.
