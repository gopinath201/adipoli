sql code
-- Create the database
CREATE DATABASE blood_bank_db;

-- Switch to the new database
USE blood_bank_db;

-- Create the blood_types table
CREATE TABLE blood_types (
    blood_id INT AUTO_INCREMENT PRIMARY KEY,
    blood_type VARCHAR(10),
    quantity INT
);

-- Create the donors table
CREATE TABLE donors (
    donor_id INT AUTO_INCREMENT PRIMARY KEY,
    donor_name VARCHAR(100),
    blood_type VARCHAR(10),
    email VARCHAR(100)
);

-- Create the issued_blood table
CREATE TABLE issued_blood (
    issue_id INT AUTO_INCREMENT PRIMARY KEY,
    blood_id INT,
    patient_name VARCHAR(100),
    date_of_issue DATE,
    quantity INT,
    FOREIGN KEY (blood_id) REFERENCES blood_types(blood_id)
);

python
import tkinter as tk
from tkinter import messagebox
import mysql.connector
from datetime import datetime

# Database connection
db = mysql.connector.connect(
    host="localhost",
    user="root",
    password="yourpassword",
    database="blood_bank_db"
)
cursor = db.cursor()

# Main application window
root = tk.Tk()
root.title("Blood Bank Management System")
root.geometry("600x400")

# Function to add a new blood type
def add_blood_type():
    def submit_blood_type():
        blood_type = blood_type_entry.get()
        quantity = int(quantity_entry.get())
        cursor.execute("INSERT INTO blood_types (blood_type, quantity) VALUES (%s, %s)", (blood_type, quantity))
        db.commit()
        messagebox.showinfo("Success", "Blood type added successfully!")
        add_blood_window.destroy()

    add_blood_window = tk.Toplevel(root)
    add_blood_window.title("Add Blood Type")
    tk.Label(add_blood_window, text="Blood Type (e.g., A+, B-):").pack()
    blood_type_entry = tk.Entry(add_blood_window)
    blood_type_entry.pack()
    tk.Label(add_blood_window, text="Quantity (units):").pack()
    quantity_entry = tk.Entry(add_blood_window)
    quantity_entry.pack()
    tk.Button(add_blood_window, text="Add", command=submit_blood_type).pack()

# Function to add a new donor
def add_donor():
    def submit_donor():
        name = name_entry.get()
        blood_type = blood_type_entry.get()
        email = email_entry.get()
        cursor.execute("INSERT INTO donors (donor_name, blood_type, email) VALUES (%s, %s, %s)", 
                       (name, blood_type, email))
        db.commit()
        messagebox.showinfo("Success", "Donor added successfully!")
        add_donor_window.destroy()

    add_donor_window = tk.Toplevel(root)
    add_donor_window.title("Add Donor")
    tk.Label(add_donor_window, text="Donor Name:").pack()
    name_entry = tk.Entry(add_donor_window)
    name_entry.pack()
    tk.Label(add_donor_window, text="Blood Type:").pack()
    blood_type_entry = tk.Entry(add_donor_window)
    blood_type_entry.pack()
    tk.Label(add_donor_window, text="Email:").pack()
    email_entry = tk.Entry(add_donor_window)
    email_entry.pack()
    tk.Button(add_donor_window, text="Add", command=submit_donor).pack()

# Function to issue blood
def issue_blood():
    def submit_issue():
        blood_id = int(blood_id_entry.get())
        patient_name = patient_name_entry.get()
        quantity = int(quantity_entry.get())
        date_of_issue = datetime.now().date()
        
        # Check if the blood type is available in sufficient quantity
        cursor.execute("SELECT quantity FROM blood_types WHERE blood_id = %s", (blood_id,))
        result = cursor.fetchone()
        if result and result[0] >= quantity:
            cursor.execute("INSERT INTO issued_blood (blood_id, patient_name, date_of_issue, quantity) VALUES (%s, %s, %s, %s)",
                           (blood_id, patient_name, date_of_issue, quantity))
            cursor.execute("UPDATE blood_types SET quantity = quantity - %s WHERE blood_id = %s", (quantity, blood_id))
            db.commit()
            messagebox.showinfo("Success", "Blood issued successfully!")
        else:
            messagebox.showerror("Error", "Insufficient quantity available.")
        issue_blood_window.destroy()

    issue_blood_window = tk.Toplevel(root)
    issue_blood_window.title("Issue Blood")
    tk.Label(issue_blood_window, text="Blood ID:").pack()
    blood_id_entry = tk.Entry(issue_blood_window)
    blood_id_entry.pack()
    tk.Label(issue_blood_window, text="Patient Name:").pack()
    patient_name_entry = tk.Entry(issue_blood_window)
    patient_name_entry.pack()
    tk.Label(issue_blood_window, text="Quantity (units):").pack()
    quantity_entry = tk.Entry(issue_blood_window)
    quantity_entry.pack()
    tk.Button(issue_blood_window, text="Issue", command=submit_issue).pack()

# Function to view issued blood records
def view_issued_blood():
    view_window = tk.Toplevel(root)
    view_window.title("Issued Blood Records")

    cursor.execute("""
        SELECT issued_blood.issue_id, blood_types.blood_type, issued_blood.patient_name, issued_blood.date_of_issue, issued_blood.quantity
        FROM issued_blood
        JOIN blood_types ON issued_blood.blood_id = blood_types.blood_id
    """)
    records = cursor.fetchall()

    for i, (issue_id, blood_type, patient_name, date_of_issue, quantity) in enumerate(records):
        tk.Label(view_window, text=f"Issue ID: {issue_id}, Blood Type: {blood_type}, Patient: {patient_name}, Date: {date_of_issue}, Quantity: {quantity} units").pack()

# Main Menu
tk.Button(root, text="Add Blood Type", command=add_blood_type).pack(pady=10)
tk.Button(root, text="Add Donor", command=add_donor).pack(pady=10)
tk.Button(root, text="Issue Blood", command=issue_blood).pack(pady=10)
tk.Button(root, text="View Issued Blood Records", command=view_issued_blood).pack(pady=10)

root.mainloop()

